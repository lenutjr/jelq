getgenv().Config = {}

local vu = game:GetService("VirtualUser")game:GetService("Players").LocalPlayer.Idled:connect(function() 
vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame) wait(1) 
vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)end)

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/zxciaz/VenyxUI/main/Reuploaded"))()
local venyx = library.new("PS99 Script", 5013109572)

local page = venyx:addPage("Main", 5012544693)
local fishPage = venyx:addPage("Fishing", 5012544693)
local eggPage = venyx:addPage("Eggs", 5012544693)
local page2 = venyx:addPage("Enchant", 5012544693)
local other = venyx:addPage("Misc", 5012544693)
local sex = other:addSection("Destroy UI")
local section1 = fishPage:addSection("Autofish")
local section2 = page:addSection("Autofarm")
local section3 = eggPage:addSection("Eggs")
local section4 = page:addSection("Everything Else")
local section5 = page2:addSection("Enchant")

section1:addTextbox("Reel Delay", "Input Number", function(reel)
    pullOut = tonumber(reel)
end)

section1:addToggle("Auto Fish", nil, function(v)
   Config.autoFish = v
   spawn(autoFish)
end)

section2:addTextbox("Farming Range", "Input Number", function(r)
    range = tonumber(r)
end)

section2:addToggle("Farm all nearby in range", nil, function(v)
    Config.farmNear = v
    spawn(farmNear)
 end)

section2:addToggle("Farm one at a time (priority: closest)", nil, function(v)
    Config.farmOne = v
    spawn(farmOne)
 end)
 
section2:addToggle("INF Magnet", nil, function(v)
   Config.infMagnet = v
   spawn(infMagnet)
end)

section3:addTextbox("Amount to Hatch", "Input Number", function(egg)
    eggs = tonumber(egg)
end)

eggs_table = {}

for _, v in pairs(game:GetService("ReplicatedStorage").__DIRECTORY.Eggs["Zone Eggs"]:GetChildren()) do
    if v:IsA("ModuleScript") then
        local noShit = v.Name:sub(5, -1)
        local eggName = noShit:gsub("^%s+", "")

        table.insert(eggs_table, eggName)
    end
end

dropdownOptions = {}

for _, v in pairs(eggs_table) do
    table.insert(dropdownOptions, v)
end

section3:addDropdown("Eggs<--(Click me to search)", dropdownOptions, function(alleggs)
    selectedEgg = tostring(alleggs)
end)

section3:addToggle("Auto Hatch Eggs", nil, function(v)
    Config.autoEgg = v
    spawn(autoEgg)
end)

section3:addButton("No Hatch Animation", function()
    aniOff()
 end)

section4:addButton("Buy Merchants", function()
   buyFromMerchants()
end)

section4:addButton("Buy Traveling Merchant", function()
    travMerchant()
end)

section4:addToggle("Claim Play Time Rewards", nil, function(v)
    Config.playtimeReward = v
    spawn(playtimeReward)
end)

enchant_table = {}

for _, v in pairs(game:GetService("ReplicatedStorage").__DIRECTORY.Enchants:GetChildren()) do
    if v:IsA("ModuleScript") then
        local main = v.Name:gsub("Enchant | ", "")

        table.insert(enchant_table, main)
    end
end

dropdownOptions = {}

for _, v in pairs(enchant_table) do
    table.insert(dropdownOptions, v)
end

section5:addDropdown("Enchants<--(Click me to search)", dropdownOptions, function(allenchants)
    selectedEnchant = tostring(allenchants)
end)

section5:addTextbox("Enchant Tier: (1, 2, 3, 4, or 5) ->", "Input Number", function(level)
    tier = tonumber(level)
end)

section5:addTextbox("Enchant how many at a time", "Input Number", function(beans)
    amount = tonumber(beans)
end)

section5:addToggle("Auto Enchant Specific", nil, function(v)
    Config.autoEnchant = v
    spawn(autoEnchant)
end)

sex:addButton("Destroy UI", function()
    destroyUI()
 end)

venyx:SelectPage(venyx.pages[1], true)

function autoFish()
    while task.wait() and Config.autoFish do
        local args = {
            [1] = "Fishing",
            [2] = "RequestCast",
            [3] = Vector3.new(1127.7171630859375, 75.91412353515625, -3445.412353515625)
        }
        
        game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
        wait(pullOut)
        
        local reelArgs = {
            [1] = "Fishing",
            [2] = "RequestReel"
        }
        
        game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(reelArgs))
        wait(4)
        
        local resultArgs = {
            [1] = "Fishing",
            [2] = "FishingResult",
            [3] = true
        }
        game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(resultArgs))
    end
end

function farmNear()
    while true do
        task.wait()
        if not Config.farmNear then
            break
        end

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local playerPosition = character:WaitForChild("HumanoidRootPart").Position

        for _, v in pairs(workspace.__THINGS.Breakables:GetChildren()) do
            if not Config.farmNear then
                return
            end

            if v:IsA("Model") then
                local distance = (v.PrimaryPart.Position - playerPosition).magnitude
                if distance <= range then
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Breakables_PlayerDealDamage"):FireServer(v.Name)
                end
            end
        end
    end
end

function farmOne()
    while task.wait() do
        if not Config.farmOne then
            break
        end

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local playerPosition = character:WaitForChild("HumanoidRootPart").Position

        local nearestBreakable = nil
        local shortestDistance = math.huge

        for _, v in pairs(workspace.__THINGS.Breakables:GetChildren()) do
            if v:IsA("Model") then
                local distance = (v.PrimaryPart.Position - playerPosition).magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestBreakable = v
                end
            end
        end

        if nearestBreakable then
            repeat
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Breakables_PlayerDealDamage"):FireServer(nearestBreakable.Name)
                task.wait()
                if not Config.farmOne then
                    break
                end
            until not nearestBreakable:IsDescendantOf(workspace)
        end

        if not Config.farmOne then
            break
        end
    end
end

function infMagnet()
   while task.wait(0.5) and Config.infMagnet do
       for _, v in pairs(workspace.__THINGS.Lootbags:GetDescendants()) do
           if v:isA("MeshPart") and v.Parent:isA("Model") then
               v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
           end
       end
       
       for _, v in pairs(workspace.__THINGS.Orbs:GetChildren()) do
           if v:isA("Part") and v.Parent.Name == "Orbs" then
               v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
           end
       end
   end
end

function autoEgg()
    while task.wait() and Config.autoEgg do
        local args = {
            [1] = selectedEgg,
            [2] = eggs
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Eggs_RequestPurchase"):InvokeServer(unpack(args))        
    end
end

function aniOff()
    local Eggs = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Egg Opening Frontend']getsenv(Eggs).PlayEggAnimation = function() return end
end

function playtimeReward()
    while Config.playtimeReward do
        for i = 1,12 do
            local args = {
                [1] = i
            }
                
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Redeem Free Gift"):InvokeServer(unpack(args))
        end
    end
    task.wait(0.5)
end

function buyFromMerchants()
    local remotes = game.ReplicatedStorage.Network
    local teleportr = remotes.Teleports_RequestTeleport
    local merchant_buy = remotes.Merchant_RequestPurchase
    local hum = game.Players.LocalPlayer.Character.Humanoid

    local Merchants = {
        {"RegularMerchant", "Oasis"},
        {"AdvancedMerchant", "Ice Rink"}
    }

    local function teleport(destination)
        teleportr:InvokeServer(destination)
        repeat task.wait() until hum.FloorMaterial == Enum.Material.Air
        task.wait(0.5)
        repeat task.wait() until hum.FloorMaterial == Enum.Material.Plastic
        hum:ChangeState(Enum.HumanoidStateType.Jumping)
        task.wait(1)
        hum:ChangeState(Enum.HumanoidStateType.Jumping)
    end

    for _, v in ipairs(Merchants) do
        teleport(v[2])
        task.wait(1)
        for i = 1, 6 do
            local a, b
            repeat
                a, b = merchant_buy:InvokeServer(v[1], i)
                task.wait(0.1)
            until not a
        end
    end
end

function travMerchant()
    local remotes = game.ReplicatedStorage.Network
    local teleportr = remotes.Teleports_RequestTeleport
    local hum = game.Players.LocalPlayer.Character.Humanoid

    local function teleport(destination)
        teleportr:InvokeServer(destination)
        repeat task.wait() until hum.FloorMaterial == Enum.Material.Air
        task.wait(0.5)
        repeat task.wait() until hum.FloorMaterial == Enum.Material.Plastic
        hum:ChangeState(Enum.HumanoidStateType.Jumping)
        task.wait(1)
        hum:ChangeState(Enum.HumanoidStateType.Jumping)
    end
    for _, v in pairs(workspace.Map:GetDescendants()) do
        if v.Name == "TravelingMerchant" and v:IsA("Model") then
            local zoneName = v.Parent.Parent.Name:match("%| (.+)")
            if zoneName then
                teleport(zoneName)
                task.wait(0.5)
                for i = 1,5 do
                    local a, b
                    repeat
                        a, b = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("TravelingMerchant_RequestPurchase"):InvokeServer(i)
                        task.wait(0.1)
                    until not a
                end
            end
        end
    end
end

function autoEnchant()
    while Config.autoEnchant do
            local args = {
            [1] = selectedEnchant,
            [2] = tier,
            [3] = amount
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("UpgradeEnchantsMachine_Activate"):InvokeServer(unpack(args))
    end
    task.wait()
end

function destroyUI()
    for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
        if v.Name == "PS99 Script" then
            v:Destroy()
        end
    end
end

local targetCFrame = CFrame.new(1068.6488, 81.6252823, -3441.63403, 0.00254215347, 7.24274898e-08, -0.999996781, 9.56023083e-09, 1, 7.24520248e-08, 0.999996781, -9.74438485e-09, 0.00254215347)

while task.wait(0.1) do
    local currentCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

    if (currentCFrame.p - targetCFrame.p).magnitude < 75 then
        local bypass = game.Players.LocalPlayer.PlayerGui._INSTANCES.FishingGame.GameBar
        bypass:Destroy()
        break
    end
end
